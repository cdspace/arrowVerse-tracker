#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.12
# In conjunction with Tcl version 8.6
#    Apr 17, 2018 11:32:36 AM

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import arrowVerseTracker_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    arrowVerseTracker_support.set_Tk_var()
    top = New_Toplevel (root)
    arrowVerseTracker_support.init(root, top)
    root.mainloop()

w = None
def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    arrowVerseTracker_support.set_Tk_var()
    top = New_Toplevel (w)
    arrowVerseTracker_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("924x606+561+179")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")



        self.mainFrame = Frame(top)
        self.mainFrame.place(relx=0.01, rely=0.02, relheight=0.97, relwidth=0.78)

        self.mainFrame.configure(relief=GROOVE)
        self.mainFrame.configure(borderwidth="2")
        self.mainFrame.configure(relief=GROOVE)
        self.mainFrame.configure(background="#d9d9d9")
        self.mainFrame.configure(width=717)

        self.displayLST = ScrolledListBox(self.mainFrame)
        self.displayLST.place(relx=0.0, rely=0.0, relheight=0.92, relwidth=0.99)
        self.displayLST.configure(background="white")
        self.displayLST.configure(disabledforeground="#a3a3a3")
        self.displayLST.configure(font="TkFixedFont")
        self.displayLST.configure(foreground="black")
        self.displayLST.configure(highlightbackground="#d9d9d9")
        self.displayLST.configure(highlightcolor="#d9d9d9")
        self.displayLST.configure(selectbackground="#c4c4c4")
        self.displayLST.configure(selectforeground="black")
        self.displayLST.configure(width=10)

        self.Button1 = Button(self.mainFrame)
        self.Button1.place(relx=0.01, rely=0.93, height=33, width=126)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Button''')
        self.Button1.configure(width=126)

        self.Button2 = Button(self.mainFrame)
        self.Button2.place(relx=0.28, rely=0.93, height=33, width=136)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Button''')
        self.Button2.configure(width=136)

        self.Button3 = Button(self.mainFrame)
        self.Button3.place(relx=0.76, rely=0.93, height=33, width=156)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Button''')
        self.Button3.configure(width=156)

        self.Button5 = Button(self.mainFrame)
        self.Button5.place(relx=0.19, rely=0.93, height=33, width=56)
        self.Button5.configure(activebackground="#d9d9d9")
        self.Button5.configure(activeforeground="#000000")
        self.Button5.configure(background="#d9d9d9")
        self.Button5.configure(disabledforeground="#a3a3a3")
        self.Button5.configure(foreground="#000000")
        self.Button5.configure(highlightbackground="#d9d9d9")
        self.Button5.configure(highlightcolor="black")
        self.Button5.configure(pady="0")
        self.Button5.configure(text='''Button''')

        self.Frame3 = Frame(top)
        self.Frame3.place(relx=0.81, rely=0.02, relheight=0.97, relwidth=0.18)
        self.Frame3.configure(relief=GROOVE)
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief=GROOVE)
        self.Frame3.configure(background="#d9d9d9")
        self.Frame3.configure(width=165)

        self.Button4 = Button(self.Frame3)
        self.Button4.place(relx=0.03, rely=0.93, height=33, width=155)
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Button''')
        self.Button4.configure(width=126)

        self.Checkbutton1 = Checkbutton(self.Frame3)
        self.Checkbutton1.place(relx=0.06, rely=0.02, relheight=0.05
                , relwidth=0.9)
        self.Checkbutton1.configure(activebackground="#d9d9d9")
        self.Checkbutton1.configure(activeforeground="#000000")
        self.Checkbutton1.configure(anchor=NW)
        self.Checkbutton1.configure(background="#d9d9d9")
        self.Checkbutton1.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1.configure(foreground="#000000")
        self.Checkbutton1.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1.configure(highlightcolor="black")
        self.Checkbutton1.configure(justify=LEFT)
        self.Checkbutton1.configure(text='''Check''')
        self.Checkbutton1.configure(variable=arrowVerseTracker_support.che48)
        self.Checkbutton1.configure(width=148)

        self.Checkbutton2 = Checkbutton(self.Frame3)
        self.Checkbutton2.place(relx=0.06, rely=0.07, relheight=0.05
                , relwidth=0.9)
        self.Checkbutton2.configure(activebackground="#d9d9d9")
        self.Checkbutton2.configure(activeforeground="#000000")
        self.Checkbutton2.configure(anchor=NW)
        self.Checkbutton2.configure(background="#d9d9d9")
        self.Checkbutton2.configure(disabledforeground="#a3a3a3")
        self.Checkbutton2.configure(foreground="#000000")
        self.Checkbutton2.configure(highlightbackground="#d9d9d9")
        self.Checkbutton2.configure(highlightcolor="black")
        self.Checkbutton2.configure(justify=LEFT)
        self.Checkbutton2.configure(text='''Check''')
        self.Checkbutton2.configure(variable=arrowVerseTracker_support.che49)
        self.Checkbutton2.configure(width=148)

        self.Checkbutton3 = Checkbutton(self.Frame3)
        self.Checkbutton3.place(relx=0.06, rely=0.12, relheight=0.05
                , relwidth=0.9)
        self.Checkbutton3.configure(activebackground="#d9d9d9")
        self.Checkbutton3.configure(activeforeground="#000000")
        self.Checkbutton3.configure(anchor=NW)
        self.Checkbutton3.configure(background="#d9d9d9")
        self.Checkbutton3.configure(disabledforeground="#a3a3a3")
        self.Checkbutton3.configure(foreground="#000000")
        self.Checkbutton3.configure(highlightbackground="#d9d9d9")
        self.Checkbutton3.configure(highlightcolor="black")
        self.Checkbutton3.configure(justify=LEFT)
        self.Checkbutton3.configure(text='''Check''')
        self.Checkbutton3.configure(variable=arrowVerseTracker_support.che50)
        self.Checkbutton3.configure(width=148)

        self.Checkbutton4 = Checkbutton(self.Frame3)
        self.Checkbutton4.place(relx=0.06, rely=0.17, relheight=0.05
                , relwidth=0.9)
        self.Checkbutton4.configure(activebackground="#d9d9d9")
        self.Checkbutton4.configure(activeforeground="#000000")
        self.Checkbutton4.configure(anchor=NW)
        self.Checkbutton4.configure(background="#d9d9d9")
        self.Checkbutton4.configure(disabledforeground="#a3a3a3")
        self.Checkbutton4.configure(foreground="#000000")
        self.Checkbutton4.configure(highlightbackground="#d9d9d9")
        self.Checkbutton4.configure(highlightcolor="black")
        self.Checkbutton4.configure(justify=LEFT)
        self.Checkbutton4.configure(text='''Check''')
        self.Checkbutton4.configure(variable=arrowVerseTracker_support.che51)
        self.Checkbutton4.configure(width=148)

        self.Checkbutton5 = Checkbutton(self.Frame3)
        self.Checkbutton5.place(relx=0.06, rely=0.22, relheight=0.05
                , relwidth=0.9)
        self.Checkbutton5.configure(activebackground="#d9d9d9")
        self.Checkbutton5.configure(activeforeground="#000000")
        self.Checkbutton5.configure(anchor=NW)
        self.Checkbutton5.configure(background="#d9d9d9")
        self.Checkbutton5.configure(disabledforeground="#a3a3a3")
        self.Checkbutton5.configure(foreground="#000000")
        self.Checkbutton5.configure(highlightbackground="#d9d9d9")
        self.Checkbutton5.configure(highlightcolor="black")
        self.Checkbutton5.configure(justify=LEFT)
        self.Checkbutton5.configure(text='''Check''')
        self.Checkbutton5.configure(variable=arrowVerseTracker_support.che52)
        self.Checkbutton5.configure(width=148)

        self.Checkbutton6 = Checkbutton(self.Frame3)
        self.Checkbutton6.place(relx=0.06, rely=0.27, relheight=0.05
                , relwidth=0.9)
        self.Checkbutton6.configure(activebackground="#d9d9d9")
        self.Checkbutton6.configure(activeforeground="#000000")
        self.Checkbutton6.configure(anchor=NW)
        self.Checkbutton6.configure(background="#d9d9d9")
        self.Checkbutton6.configure(disabledforeground="#a3a3a3")
        self.Checkbutton6.configure(foreground="#000000")
        self.Checkbutton6.configure(highlightbackground="#d9d9d9")
        self.Checkbutton6.configure(highlightcolor="black")
        self.Checkbutton6.configure(justify=LEFT)
        self.Checkbutton6.configure(text='''Check''')
        self.Checkbutton6.configure(variable=arrowVerseTracker_support.che53)
        self.Checkbutton6.configure(width=148)

        self.Checkbutton7 = Checkbutton(self.Frame3)
        self.Checkbutton7.place(relx=0.06, rely=0.32, relheight=0.05
                , relwidth=0.9)
        self.Checkbutton7.configure(activebackground="#d9d9d9")
        self.Checkbutton7.configure(activeforeground="#000000")
        self.Checkbutton7.configure(anchor=NW)
        self.Checkbutton7.configure(background="#d9d9d9")
        self.Checkbutton7.configure(disabledforeground="#a3a3a3")
        self.Checkbutton7.configure(foreground="#000000")
        self.Checkbutton7.configure(highlightbackground="#d9d9d9")
        self.Checkbutton7.configure(highlightcolor="black")
        self.Checkbutton7.configure(justify=LEFT)
        self.Checkbutton7.configure(text='''Check''')
        self.Checkbutton7.configure(variable=arrowVerseTracker_support.che54)
        self.Checkbutton7.configure(width=148)

        self.Checkbutton8 = Checkbutton(self.Frame3)
        self.Checkbutton8.place(relx=0.06, rely=0.87, relheight=0.05
                , relwidth=0.9)
        self.Checkbutton8.configure(activebackground="#d9d9d9")
        self.Checkbutton8.configure(activeforeground="#000000")
        self.Checkbutton8.configure(anchor=NW)
        self.Checkbutton8.configure(background="#d9d9d9")
        self.Checkbutton8.configure(disabledforeground="#a3a3a3")
        self.Checkbutton8.configure(foreground="#000000")
        self.Checkbutton8.configure(highlightbackground="#d9d9d9")
        self.Checkbutton8.configure(highlightcolor="black")
        self.Checkbutton8.configure(justify=LEFT)
        self.Checkbutton8.configure(text='''Check''')
        self.Checkbutton8.configure(variable=arrowVerseTracker_support.che56)
        self.Checkbutton8.configure(width=148)





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



